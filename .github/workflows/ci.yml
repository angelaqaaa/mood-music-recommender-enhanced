name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Check code formatting with Black
      run: |
        black --check --diff src/ tests/

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Treat all other issues as warnings
        flake8 src/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Type check with mypy
      run: |
        mypy src/musicrec/ --ignore-missing-imports --no-strict-optional

    - name: Test with pytest
      run: |
        pytest --cov=src/musicrec --cov-report=xml --cov-report=term-missing --maxfail=5 -v

    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  integration-test:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Run integration tests
      run: |
        pytest tests/test_integration_cli.py -v --tb=short

    - name: Test sample data generation
      run: |
        python -c "
        import sys
        sys.path.insert(0, 'src')
        from musicrec.main import create_sample_data
        df = create_sample_data(num_genres=3, tracks_per_genre=5)
        assert len(df) == 15
        print('✓ Sample data generation successful')
        "

    - name: Test CLI help
      run: |
        python run_app.py --help

    - name: Test configuration loading
      run: |
        python -c "
        import sys
        sys.path.insert(0, 'src')
        from musicrec.config.settings import load_config
        config = load_config()
        assert 'data' in config
        assert 'retry' in config
        print('✓ Configuration loading successful')
        "

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run Bandit security linter
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        bandit -r src/ --severity-level medium
    
    - name: Check dependencies for known vulnerabilities
      run: |
        safety check --json || true
        safety check

  lint-and-format-check:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install formatting tools
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8
    
    - name: Check import sorting with isort
      run: |
        isort --check-only --diff src/ tests/
    
    - name: Comprehensive flake8 check
      run: |
        flake8 src/ tests/ --max-line-length=88 --extend-ignore=E203,W503
    
    - name: Check for common issues
      run: |
        python -c "
        import ast
        import os
        
        def check_file(filepath):
            with open(filepath, 'r', encoding='utf-8') as f:
                try:
                    ast.parse(f.read())
                    return True
                except SyntaxError as e:
                    print(f'Syntax error in {filepath}: {e}')
                    return False
        
        all_good = True
        for root, dirs, files in os.walk('src'):
            for file in files:
                if file.endswith('.py'):
                    if not check_file(os.path.join(root, file)):
                        all_good = False
        
        if all_good:
            print('✓ All Python files have valid syntax')
        else:
            exit(1)
        "
